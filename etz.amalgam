#if 0
#/*
# __/\\\\\\\\\\\\\\\_____________________________        
#  _\/\\\///////////______________________________       
#  _\/\\\_________________/\\\____________________      
#   _\/\\\\\\\\\\\______/\\\\\\\\\\\__/\\\\\\\\\\\_     
#    _\/\\\///////______\////\\\////__\///////\\\/__    
#     _\/\\\________________\/\\\___________/\\\/____   
#      _\/\\\________________\/\\\_/\\_____/\\\/______  
#       _\/\\\\\\\\\\\\\\\____\//\\\\\____/\\\\\\\\\\\_ 
#        _\///////////////______\/////____\///////////__
#
# No include, minimal linking minimalist and hacky single file game made for https://itch.io/jam/4mb-jam-2023.
#
# To compile and run just execute this file.
#
# Currently it only targets i386-linux-gnu.
#
# Taken steps:
# - Removed last 6 zeroed bytes of ehdr, for some reason elf loader can extend it automatically.
# - No dynamic memory mapping, .bss is used instead, which leaves mapping with zeroing to loader.
# - Assume success, take approaches that least susceptible to failing.
# - Use the fact that process termination clears the state, such as opened files.
# - Assume cwd has executable in it.
# - Zeroing of p_paddr is compressing freindly and shaves a few bytes, same with p_align for non-load commands.
# - ELF alignment restrictions are ignored.
#
# Used resources
# --------------
# - ELF madness:
# https://man7.org/linux/man-pages/man5/elf.5.html
# https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html
#
# - Size related i386 GCC/LD options:
# http://ptspts.blogspot.com/2013/12/how-to-make-smaller-c-and-c-binaries.html
#
# - Neat demoscene wiki page:
# https://in4k.github.io/wiki/linux
#
# - vt340 manual for sixel graphics programming:
# https://www.vt100.net/docs/vt3xx-gp/chapter14.html
# https://www.vt100.net/docs/vt3xx-gp/chapter13.html
#
# - Audio generation:
# https://www.musicdsp.org/en/latest/
# https://www.ams.jhu.edu/dan-mathofmusic/notes-intervals/
# https://www.ams.jhu.edu/dan-mathofmusic/sound-waves/
# https://www.earlevel.com/main/2003/03/02/the-digital-state-variable-filter/
# https://www.cs.cmu.edu/~rbd/papers/cmj-float-to-int.html
#
#*/

set -e
cat << ELF_HEADER_SOURCE > ./elf.as
elfoff = 0x08048000
vaddr = 0x08048000
.text
ehdrstart:
  .byte      0x7F                       # e_ident
  .ascii     "ELF"
  .skip      3, 1
#todo : This space could be used.
  .skip      9, 0
  .word      2                          # e_type
  .word      3                          # e_machine
  .long      1                          # e_version
  .long      entry                      # e_entry
  .long      phdrstart - elfoff         # e_phoff
  .long      0                          # e_shoff
  .long      0                          # e_flags
  .word      ehdrsize                   # e_ehsize
  .word      32                         # e_phentsize
  .word      1                          # e_phnum
#Could be removed, but GDB will not happy about it:
  .skip      6, 0
ehdrsize = . - ehdrstart

phdrstart:
#PT_LOAD
  .long      1                          # p_type
  .long      0                          # p_offset
  .long      vaddr                      # p_vaddr
  .long      0                          # p_paddr
  .long      filesz                     # p_filesz
  .long      memsz                      # p_memsz
  .long      7                          # p_flags
  .long      0x0000                     # p_align
ELF_HEADER_SOURCE

#todo : Use / tmp /
cat << LINKER_SCRIPT_SOURCE > ./ld.scr
SECTIONS {
  . = 0x08048000;
  filestart = .;

  .elf : { ./elf.o (.text) }

  /* todo: Would 1 alignment break C assumptions? */
  .text ALIGN(0x1) : SUBALIGN(0x1) { *(.text*) *(.rodata*) }
  .data ALIGN(0x1) : SUBALIGN(0x1) { *(.data*) }
  filesz = . - filestart;

  .bss : { *(.bss*) }
  memsz = . - filestart;

  /DISCARD/ : {
    *(.note.*)
    *(.gnu*)
    *(.gcc*)
    *(.comment)
    *(.eh_frame*)
  }
}
OUTPUT_FORMAT(binary)
LINKER_SCRIPT_SOURCE

CFLAGS="-x c -std=gnu89 $0 -m32 -nostdlib \
  -DETZ -Wall -Wextra -Wpedantic -Werror -march=core2 \
  -fno-stack-protector -fomit-frame-pointer -mpreferred-stack-boundary=2 \
  -falign-functions=1 -falign-jumps=1 -falign-loops=1 -fno-unwind-tables \
  -fno-asynchronous-unwind-tables -fmerge-all-constants -fno-ident \
  -mno-stack-arg-probe -Qn -fno-PIC -fno-PIE -static -fno-plt \
  -ffunction-sections -fdata-sections -fno-stack-check"

LDFLAGS="-m elf_i386 --build-id=none -z norelro -z noseparate-code \
  --no-eh-frame-hdr --no-ld-generated-unwind-info --hash-style=sysv \
  -z nodynamic-undefined-weak --gc-sections"

if [ ! -z "$1" ] && [ $1 = DEBUG ];
then
  CFLAGS="$CFLAGS -O0 -g3 -ggdb -DDEBUG"
  LDFLAGS="$LDFLAGS -eentry"
else
  CFLAGS="$CFLAGS -Os"
  LDFLAGS="$LDFLAGS -T ld.scr -s"
fi

as --32 -o elf.o elf.as
cc -c -o ./etz.o $CFLAGS
ld -o etz ./elf.o ./etz.o $LDFLAGS
set +e
if [ -x $(command -v upx) ]; then
  upx ./etz -q --best --ultra-brute
fi
./etz
exit;
#endif

#ifdef ETZ

#define LENGTHOF(p_arr) (sizeof(p_arr) / sizeof(*p_arr))

#ifdef DEBUG
#define STR_(p_str) #p_str
#define STR(p_str) STR_(p_str)
#define ASSERT(p_expr)                                                         \
  {                                                                            \
    if (!(p_expr)) {                                                           \
      asm volatile("int3");                                                    \
      SYS_WRITE_LITERAL(FD_STDOUT,                                             \
                        STR(__LINE__) ": assert failed for: " #p_expr "\n");   \
      SYS_EXIT(-1);                                                            \
    }                                                                          \
  }
#else
#define ASSERT(p_expr) (p_expr) ? (void)0 : __builtin_unreachable()
#endif /* ifdef DEBUG */

/* https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86-32_bit
 */

/* todo: Generic SYS_CALL macro?
 * https://github.com/Jorengarenar/CMObALL/blob/master/cmoball.h
 */

/* https://man7.org/linux/man-pages/man2/exit.2.html */
#define SYS_EXIT(p_return_code)                                                \
  {                                                                            \
    asm volatile("int $0x80" : : "a"(1), "b"(p_return_code));                  \
    __builtin_unreachable();                                                   \
  }

/* https://man7.org/linux/man-pages/man2/write.2.html
 * todo: "m" is only valid for GCC, not Clang.
 * https://stackoverflow.com/questions/56432259/how-can-i-indicate-that-the-memory-pointed-to-by-an-inline-asm-argument-may-be
 */
#define SYS_WRITE(p_fd, p_msg, p_msg_len)                                      \
  asm volatile("int $0x80"                                                     \
               : "=a"(sys_result)                                              \
               : "a"(4), "b"(p_fd), "c"(p_msg), "d"(p_msg_len)                 \
               : "memory")

#define FD_STDIN 0
#define FD_STDOUT 1

#define SYS_WRITE_LITERAL(p_fd, p_msg) SYS_WRITE(p_fd, p_msg, sizeof(p_msg) - 1)

/* https://man7.org/linux/man-pages/man2/open.2.html */
#define SYS_OPEN(p_fd_out, p_path, p_flags)                                    \
  asm volatile("int $0x80"                                                     \
               : "=a"(p_fd_out)                                                \
               : "a"(5), "b"(p_path), "c"(p_flags), "d"(0666),                 \
                 "m"(*(const char(*)[sizeof(p_path)])(p_path)))

#define O_RDONLY 0
#define O_WRONLY 1

/* https://man7.org/linux/man-pages/man2/execve.2.html
 * note: Reuses NULL at the end of wrapping_args for envp
 */
#define SYS_EXECVE(p_path, p_argv, p_envp)                                     \
  asm volatile("int $0x80"                                                     \
               : "=a"(sys_result)                                              \
               : "a"(11), "b"(p_path), "c"(p_argv), "d"(p_envp)                \
               : "memory")

/* https://man7.org/linux/man-pages/man2/fork.2.html */
#define SYS_FORK(p_result_out)                                                 \
  asm volatile("int $0x80" : "=a"(p_result_out) : "a"(2))

/* https://man7.org/linux/man-pages/man2/pipe.2.html */
#define SYS_PIPE(p_result_pipes)                                               \
  asm volatile("int $0x80" : "=a"(sys_result) : "a"(42), "b"(p_result_pipes));

/* https://man7.org/linux/man-pages/man2/dup2.2.html */
#define SYS_DUP2(p_old, p_new)                                                 \
  asm volatile("int $0x80"                                                     \
               : "=a"(sys_result)                                              \
               : "a"(63), "b"(p_old), "c"(p_new));

/* todo: Try making it auto variable */
static int sys_result;

#define PIFLOAT 3.141593f

/* note: result is 80bit floating point
 * https://www.cs.uaf.edu/2012/fall/cs301/lecture/11_02_other_float.html
 */
#define FSIN(p_result, p_in) asm inline("fsin" : "=t"(p_result) : "0"(p_in))
#define FCOS(p_result, p_in) asm inline("fcos" : "=t"(p_result) : "0"(p_in))

#define ASCII_ESCAPE "\x1b"
#define SIXEL_MODE_START ASCII_ESCAPE "P7q"
#define SIXEL_MODE_END ASCII_ESCAPE "\\"

static const char exe[] = "./etz";
static const char *const xterm_args[9] = {
    " ", "-ti", "vt340", "-geometry", "125x40", "-e", exe, exe, (void *)0};
static const char *const aplay_args[3] = {"aplay", (void *)0};

#define AUDIOBUFFERSZ 1024
#define AUDIOFRAMERATE 8000
#define BASENOTEFREQ 440.f /* A in octave 4 */
#define NOTEUPSCALEFACTOR

#define SHORT_FROM_CLAMPED_FLOAT(p_in) (short)((p_in)*32768)

static int apipes[2];
static short aring[AUDIOBUFFERSZ];
static unsigned int aringoff; /* Offset to remaining frames */
static unsigned int aringsz;  /* Remaining frames */

/* todo: Preferably should not be done or present on runtime at all.
 * Digital state variable filter as an oscillator.
 */
static struct sinewave {
  float f, s, c;
} init_sinewave(float freq, float phase, float amplitude) {
  struct sinewave r;
  __float80 v;
  FSIN(v, PIFLOAT * freq / AUDIOFRAMERATE);
  r.f = 2.f * (float)v;
  FSIN(v, phase);
  r.s = v;
  FCOS(v, phase);
  r.c = amplitude * (float)v;
  return r;
}

static void pump_sinewave(struct sinewave *wave) {
  wave->s -= wave->f * wave->c;
  wave->c += wave->f * wave->s;
}

/* https://en.wikipedia.org/wiki/Linear_congruential_generator */
static unsigned rand() {
  static unsigned long x = 3333;
  return (x = (x * 16807) % 2147483647);
}

static struct sinewave sineosc0;
static struct sinewave sineosc1;

/* todo: Sample generation should be done from one single function */
static void init_audio(void) {
  /* todo: Can it be forced to be done on comptime? */
  sineosc0 = init_sinewave(BASENOTEFREQ / 8.f, 0.f, 0.5f);
  sineosc1 = init_sinewave(BASENOTEFREQ / 2.f, 0.5f, 0.33f);
}

static void feed_audio(void) {
  unsigned towrite, i = 0;
  for (towrite = AUDIOBUFFERSZ - aringoff - aringsz; i < towrite; ++i) {
    aring[aringoff + i] = SHORT_FROM_CLAMPED_FLOAT(sineosc0.s);
    aring[aringoff + i] += SHORT_FROM_CLAMPED_FLOAT(sineosc1.s);
    aring[aringoff + i] += (short)(rand() >> 16) / 16;
    pump_sinewave(&sineosc0);
    pump_sinewave(&sineosc1);
  }
  aringsz += towrite;
  SYS_WRITE(apipes[1], aring + aringoff, aringsz * 2);
  ASSERT(sys_result >= 0);
  aringsz -= sys_result / 2;
  aringoff += sys_result / 2;
  ASSERT(aringoff <= AUDIOBUFFERSZ);
  if (aringoff == AUDIOBUFFERSZ)
    aringoff = 0;
}

__attribute((naked)) void entry(void) {
  char const **envp;
  int argc, apid;

  asm inline("movl $4, %%eax\n\t"
             "movl (%%esp), %%ebx\n\t"
             "mull %%ebx\n\t"
             "addl %%esp, %%eax\n\t"
             "addl $8, %%eax\n\t"
             : "=a"(envp), "=b"(argc)
             :
             : "cc");

  /* Assume that argc == 1 means bootstrapping execution */
  if (argc == 1) {
    SYS_EXECVE("/usr/bin/xterm", xterm_args, envp);
    ASSERT(0);
  }

  SYS_PIPE(apipes);
  ASSERT(sys_result == 0);
  SYS_FORK(apid);
  ASSERT(apid >= 0);
  if (!apid) {
    /* Child process */
    SYS_DUP2(apipes[0], FD_STDIN);
    ASSERT(sys_result >= 0);
    /* todo: Can we pass empty envp here? */
    SYS_EXECVE("/usr/bin/aplay", aplay_args, envp);
    ASSERT(0);
  }

  init_audio();

  while (1) {
    /* int i; */
    feed_audio();
    /*
    SYS_WRITE_LITERAL(FD_STDOUT, ASCII_ESCAPE "[0;0H" SIXEL_MODE_START);
    for (i = 0; i < 83; ++i)
      SYS_WRITE_LITERAL(FD_STDOUT, "!750~-");
    SYS_WRITE_LITERAL(FD_STDOUT, "!750~-" SIXEL_MODE_END);
    */
  }

  SYS_EXIT(0);
}

#endif /* #ifdef ETZ */
